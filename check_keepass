#! /usr/bin/env python3
"""Keepass file checker for borgit.
With thanks to lgg on github's gist:
https://gist.github.com/lgg/e6ccc6e212d18dd2ecd8a8c116fb1e45"""
import sys


class NotKDB(Exception):
    """Error when a file is not a valid KDB."""


class UnsupportedKDB(Exception):
    """Error for unsupported KDB file versions."""


def validate_signature(signature):
    """Validate the KDB file signature."""
    kdb_sig = bytes((0x03, 0xd9, 0xa2, 0x9a))
    if signature != kdb_sig:
        raise NotKDB(
            'Target file is not a valid KDB file.',
        )


def get_kdb_details(data):
    """Get information from the KDB file.
    Returns a dict containing:
      version: The version of the KDB file.
      groups: Count of groups in the KDB file.
      entries: Count of entries in the KDB file.
    """
    versions = {
        0x65: '1',
        0x66: '2-alpha',
        0x67: '2',
    }

    data_ver_byte = data[4]

    kdb_version = versions.get(data_ver_byte)

    kdb_version_signature = bytes((0xfb, 0x4b, 0xb5))
    data_version_signature = data[5:8]

    if kdb_version_signature != data_version_signature:
        raise UnsupportedKDB(
            'Unknown or corrupt KDB version encountered.'
        )
    if not kdb_version:
        raise UnsupportedKDB(
            'Unknown KDB version encountered.'
        )
    if kdb_version != '1':
        raise UnsupportedKDB(
            'Only version 1.x KDB supported currently.'
        )

    group_count = int.from_bytes(data[48:52], 'little')
    entry_count = int.from_bytes(data[52:56], 'little')

    return {
        'version': kdb_version,
        'groups': group_count,
        'entries': entry_count,
    }


def check_kdb_file(target_file):
    """Check a KDB file is valid and meets the specified requirements."""
    with open(target_file, 'rb') as kdb_file:
        kdb_data = kdb_file.read()

    validate_signature(kdb_data[0:4])

    kdb_details = get_kdb_details(kdb_data)
    print(kdb_details)


if __name__ == '__main__':
    check_kdb_file(sys.argv[1])
